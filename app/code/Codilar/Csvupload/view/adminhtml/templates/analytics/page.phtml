<?php



?>
<main id="anchor-content" class="page-content"><div id="page:main-container" class="page-columns"><div class="admin__old"><div id="container" class="main-col">

<form action="" method="" id="" name="" enctype="multipart/form-data">
<?php echo $block->getBlockHtml('formkey')?>

    <table class="data-grid" id="sales_transactions_grid_table">
    <!-- Rendering column set -->
        <thead>
        <tr>
             <th class="data-grid-th   col-period last col-created_at"><span>Google Analytics</span></th>
        </tr>

        </thead>

        <tbody>

            <tr class="data-grid-tr-no-data even" data-role="row">
                <td class="empty-text" colspan="12">
                    <div id="embed-api-auth-container"></div>
                    <div id="chart-container"></div>
                    <div id="view-selector-container"></div>
                </td>
            </tr>
        </tbody>

    </table>

    <table class="data-grid" id="sales_transactions_grid_table">
        <!-- Rendering column set -->
        <thead>
        <tr>
            <th class="data-grid-th   col-period last col-created_at"><span>Google Analytics Multiple Views</span></th>
        </tr>

        </thead>

        <tbody>

        <tr class="data-grid-tr-no-data even" data-role="row">
            <td class="empty-text" colspan="12">
                <div id="embed-api-auth-container1"></div>
                <div id="chart-1-container"></div>
                <div id="view-selector-1-container"></div>
                <div id="chart-2-container"></div>
                <div id="view-selector-2-container"></div>
            </td>
        </tr>
        </tbody>

    </table>

    <!--Embed API Third Party Visualizer-->
    <table class="data-grid" id="sales_transactions_grid_table">
        <!-- Rendering column set -->
        <thead>
        <tr>
            <th class="data-grid-th   col-period last col-created_at"><span>Custom Components</span></th>
        </tr>

        </thead>

        <tbody>

        <tr class="data-grid-tr-no-data even" data-role="row">
            <td class="empty-text" colspan="12">
                <div id="embed-api-auth-container2"></div>
                <div id="view-selector-container2"></div>
                <div id="data-chart-1-container"></div>
                <div id="date-range-selector-1-container"></div>
                <div id="data-chart-2-container"></div>
                <div id="date-range-selector-2-container"></div>
            </td>
        </tr>
        </tbody>

    </table>
</form>

            </div></div></div>
<div style="background-color: lightgrey">
</div>

</main>

<script>
        (function(w,d,s,g,js,fs){
            g=w.gapi||(w.gapi={});g.analytics={q:[],ready:function(f){this.q.push(f);}};
            js=d.createElement(s);fs=d.getElementsByTagName(s)[0];
            js.src='https://apis.google.com/js/platform.js';
            fs.parentNode.insertBefore(js,fs);js.onload=function(){g.load('analytics');};
        }(window,document,'script'));

</script>

<!--Embed API Single Views-->
   <!-- <script>
    /*single chart*/
    gapi.analytics.ready(function() {

     /**
     * Authorize the user immediately if the user has already granted access.
     * If no access has been created, render an authorize button inside the
     * element with the ID "embed-api-auth-container".
     */
     gapi.analytics.auth.authorize({
     container: 'embed-api-auth-container',
     clientid: "938526124221-appkmm3pd0n28rs1t4b4tam59lm3cq2n.apps.googleusercontent.com"
     });


     /**
     * Create a new ViewSelector instance to be rendered inside of an
     * element with the id "view-selector-container".
     */
     var viewSelector = new gapi.analytics.ViewSelector({
     container: 'view-selector-container'
     });

     // Render the view selector to the page.
     viewSelector.execute();


     /**
     * Create a new DataChart instance with the given query parameters
     * and Google chart options. It will be rendered inside an element
     * with the id "chart-container".
     */
     var dataChart = new gapi.analytics.googleCharts.DataChart({
     query: {
     metrics: 'ga:sessions',
     dimensions: 'ga:date',
     'start-date': '30daysAgo',
     'end-date': 'yesterday'
     },
     chart: {
     container: 'chart-container',
     type: 'LINE',
     options: {
     width: '100%'
     }
     }
     });


     /**
     * Render the dataChart on the page whenever a new view is selected.
     */
     viewSelector.on('change', function(ids) {
     dataChart.set({query: {ids: ids}}).execute();
     });

     });
</script>-->

<!--Embed API Multiple Views-->
    <!--<script>

    gapi.analytics.ready(function() {

        /**
         * Authorize the user immediately if the user has already granted access.
         * If no access has been created, render an authorize button inside the
         * element with the ID "embed-api-auth-container".
         */
        gapi.analytics.auth.authorize({
            container: 'embed-api-auth-container1',
            clientid: '938526124221-appkmm3pd0n28rs1t4b4tam59lm3cq2n.apps.googleusercontent.com'
        });


        /**
         * Create a ViewSelector for the first view to be rendered inside of an
         * element with the id "view-selector-1-container".
         */
        var viewSelector1 = new gapi.analytics.ViewSelector({
            container: 'view-selector-1-container'
        });

        /**
         * Create a ViewSelector for the second view to be rendered inside of an
         * element with the id "view-selector-2-container".
         */
        var viewSelector2 = new gapi.analytics.ViewSelector({
            container: 'view-selector-2-container'
        });

        // Render both view selectors to the page.
        viewSelector1.execute();
        viewSelector2.execute();


        /**
         * Create the first DataChart for top countries over the past 30 days.
         * It will be rendered inside an element with the id "chart-1-container".
         */
        var dataChart1 = new gapi.analytics.googleCharts.DataChart({
            query: {
                metrics: 'ga:sessions',
                dimensions: 'ga:country',
                'start-date': '30daysAgo',
                'end-date': 'yesterday',
                'max-results': 6,
                sort: '-ga:sessions'
            },
            chart: {
                container: 'chart-1-container',
                type: 'PIE',
                options: {
                    width: '100%',
                    pieHole: 4/9
                }
            }
        });


        /**
         * Create the second DataChart for top countries over the past 30 days.
         * It will be rendered inside an element with the id "chart-2-container".
         */
        var dataChart2 = new gapi.analytics.googleCharts.DataChart({
            query: {
                metrics: 'ga:sessions',
                dimensions: 'ga:country',
                'start-date': '30daysAgo',
                'end-date': 'yesterday',
                'max-results': 6,
                sort: '-ga:sessions'
            },
            chart: {
                container: 'chart-2-container',
                type: 'PIE',
                options: {
                    width: '100%',
                    pieHole: 4/9
                }
            }
        });

        /**
         * Update the first dataChart when the first view selecter is changed.
         */
        viewSelector1.on('change', function(ids) {
            dataChart1.set({query: {ids: ids}}).execute();
        });

        /**
         * Update the second dataChart when the second view selecter is changed.
         */
        viewSelector2.on('change', function(ids) {
            dataChart2.set({query: {ids: ids}}).execute();
        });

    });
</script>-->

<!--Embed API Third Party Visualizations-->
<script src="https://ga-dev-tools.appspot.com/public/javascript/embed-api/components/view-selector2.js"></script>
<script src="https://ga-dev-tools.appspot.com/public/javascript/embed-api/components/date-range-selector.js"></script>
<script>

    gapi.analytics.ready(function() {

        /**
         * Authorize the user immediately if the user has already granted access.
         * If no access has been created, render an authorize button inside the
         * element with the ID "embed-api-auth-container".
         */
        gapi.analytics.auth.authorize({
            container: 'embed-api-auth-container2',
            clientid: '938526124221-appkmm3pd0n28rs1t4b4tam59lm3cq2n.apps.googleusercontent.com'
        });


        /**
         * Store a set of common DataChart config options since they're shared by
         * both of the charts we're about to make.
         */
        var commonConfig = {
            query: {
                metrics: 'ga:sessions',
                dimensions: 'ga:date'
            },
            chart: {
                type: 'LINE',
                options: {
                    width: '100%'
                }
            }
        };


        /**
         * Query params representing the first chart's date range.
         */
        var dateRange1 = {
            'start-date': '14daysAgo',
            'end-date': '8daysAgo'
        };


        /**
         * Query params representing the second chart's date range.
         */
        var dateRange2 = {
            'start-date': '7daysAgo',
            'end-date': 'yesterday'
        };


        /**
         * Create a new ViewSelector2 instance to be rendered inside of an
         * element with the id "view-selector-container".
         */
        var viewSelector = new gapi.analytics.ext.ViewSelector2({
            container: 'view-selector-container2',
        }).execute();


        /**
         * Create a new DateRangeSelector instance to be rendered inside of an
         * element with the id "date-range-selector-1-container", set its date range
         * and then render it to the page.
         */
        var dateRangeSelector1 = new gapi.analytics.ext.DateRangeSelector({
            container: 'date-range-selector-1-container'
        })
            .set(dateRange1)
            .execute();


        /**
         * Create a new DateRangeSelector instance to be rendered inside of an
         * element with the id "date-range-selector-2-container", set its date range
         * and then render it to the page.
         */
        var dateRangeSelector2 = new gapi.analytics.ext.DateRangeSelector({
            container: 'date-range-selector-2-container'
        })
            .set(dateRange2)
            .execute();


        /**
         * Create a new DataChart instance with the given query parameters
         * and Google chart options. It will be rendered inside an element
         * with the id "data-chart-1-container".
         */
        var dataChart1 = new gapi.analytics.googleCharts.DataChart(commonConfig)
            .set({query: dateRange1})
            .set({chart: {container: 'data-chart-1-container'}});


        /**
         * Create a new DataChart instance with the given query parameters
         * and Google chart options. It will be rendered inside an element
         * with the id "data-chart-2-container".
         */
        var dataChart2 = new gapi.analytics.googleCharts.DataChart(commonConfig)
            .set({query: dateRange2})
            .set({chart: {container: 'data-chart-2-container'}});


        /**
         * Register a handler to run whenever the user changes the view.
         * The handler will update both dataCharts as well as updating the title
         * of the dashboard.
         */
        viewSelector.on('viewChange', function(data) {
            dataChart1.set({query: {ids: data.ids}}).execute();
            dataChart2.set({query: {ids: data.ids}}).execute();

            var title = document.getElementById('view-name');
            title.textContent = data.property.name + ' (' + data.view.name + ')';
        });


        /**
         * Register a handler to run whenever the user changes the date range from
         * the first datepicker. The handler will update the first dataChart
         * instance as well as change the dashboard subtitle to reflect the range.
         */
        dateRangeSelector1.on('change', function(data) {
            dataChart1.set({query: data}).execute();

            // Update the "from" dates text.
            var datefield = document.getElementById('from-dates');
            datefield.textContent = data['start-date'] + '&mdash;' + data['end-date'];
        });


        /**
         * Register a handler to run whenever the user changes the date range from
         * the second datepicker. The handler will update the second dataChart
         * instance as well as change the dashboard subtitle to reflect the range.
         */
        dateRangeSelector2.on('change', function(data) {
            dataChart2.set({query: data}).execute();

            // Update the "to" dates text.
            var datefield = document.getElementById('to-dates');
            datefield.textContent = data['start-date'] + '&mdash;' + data['end-date'];
        });

    });
</script>

<script>
    function getClientId() {
        return "938526124221-appkmm3pd0n28rs1t4b4tam59lm3cq2n.apps.googleusercontent.com";
    }
</script>






